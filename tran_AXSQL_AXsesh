/*Hello there******************************************************************

.SYNOPSIS
    Dynamics AX sessions with SQL transaction information

.DESCRIPTION
    Combines processes and transactions on SQL engine with SYSCLIENTSESSIONS 
    Dynamics AX table.

    How to use:
    Run in the context of Dynamics AX database

    To see processing requests on AX and TempDB:
    WHERE 
        db_name(ses.database_id) != N'master' 
        AND ser.[status] IS NOT NULL
        AND ses.[nt_user_name] IS NOT NULL 

    To see all sessions in SQL on AX and TempDB:
    WHERE 
        db_name(ses.database_id) != N'master' 
        -- AND ser.[status] IS NOT NULL
        AND ses.[nt_user_name] IS NOT NULL 
        AND spu.internal_objects_alloc_page_count IS NOT NULL
        AND spu.internal_objects_alloc_page_count != 0

.NOTES
    Subqueries 'SYSCLIENTSESSIONS AS scs' use TOP 1, ORDER BY scs.RECID DESC.
        Reason: when AX batch is cancelled manually in AX, makes AX_SESH with 
        same number, but diffrent state. Previous session is present in the 'scs'
        for brief amount of time.

.LINK
https://raw.githubusercontent.com/Drumsand
******************************************************************************/

SELECT
    ses.[status] AS [Sesh State]
    , ser.cpu_time
    , tat.name AS [tr_name]
    , [tr state] = CASE
        WHEN tat.transaction_state in (0,1) THEN 'init'
        WHEN tat.transaction_state = 2 THEN 'active'
        WHEN tat.transaction_state = 3 THEN 'read-only ended'
        WHEN tat.transaction_state = 4 THEN 'dtc waiting'
        WHEN tat.transaction_state = 4 THEN 'waiting'
        WHEN tat.transaction_state = 6 THEN 'comitted'
        WHEN tat.transaction_state = 7 THEN 'rolling back' 
        WHEN tat.transaction_state = 8 THEN 'rolled back'
            ELSE 'N/A'
    END
    -- , tat.dtc_state AS [DTC State] 
    , ses.session_id AS [spid]
    , blk = CASE 
        WHEN ser.blocking_session_id IS NULL THEN 0
            ELSE ser.blocking_session_id
        END
    , ses.host_name AS [HostName]
    , app = CASE
        WHEN ses.program_name LIKE N'%Dynamics AX' THEN N'AX'
        WHEN ses.program_name LIKE N'%SQL Server Management%' THEN N'SSMS'
        WHEN ses.program_name LIKE N'%azdata-Query%' THEN N'azData'
        WHEN ses.program_name LIKE N'%Microsoft® Windows® Operating System' THEN N'MS Win'
        WHEN ses.host_name LIKE N'%CDX%' THEN N'AX RTS'
        WHEN ses.nt_user_name = N'SA_P_ECOM_SQL' THEN N'ECOM'
        WHEN ses.program_name LIKE N'%Data Provider%' THEN N'Core SqlClient'
        WHEN ses.program_name LIKE N'%SQLAgent%' THEN N'SQL Agent'
                ELSE ses.program_name
    END
    , ser.[status] AS [req status]
    , ser.wait_time / 1000 AS [WaitTime (s)]
    , ser.wait_type
    , [elapsed (s)] = CASE 
        WHEN ast.elapsed_time_seconds IS NULL THEN N'_'
            ELSE (
                TRY_CAST(ast.elapsed_time_seconds AS nvarchar)
            )
        END
    , begin_time = CASE
        WHEN TRY_CAST(tat.transaction_begin_time AS nvarchar) IS NULL THEN N'_'
            ELSE (
                CONVERT(VARCHAR, tat.transaction_begin_time, 24)
            )
        END
    , AX_User = CASE 
        WHEN LEN(ses.context_info) = 0 THEN N'N/A'
        WHEN ses.context_info IS NULL THEN N'None'
            ELSE (
                SELECT TOP 1 scs.USERID
                FROM SYSCLIENTSESSIONS AS scs
                WHERE SUBSTRING(CAST(ses.context_info AS VARCHAR(128)),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2) + 1) - CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2)) = scs.SESSIONID
                ORDER BY scs.RECID DESC
            )
        END
    , AX_SESH = CASE
        WHEN LEN(ses.context_info) = 0 THEN N'_'
        WHEN ses.context_info IS NULL THEN N'No AXUSER'
            ELSE (SUBSTRING(CAST(ses.context_info AS VARCHAR(128)),
                CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2),
                CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),
                CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2) + 1) - CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2))
            )
        END
    , AX_State = CASE
        WHEN LEN(ses.context_info) = 0 THEN 1001

        WHEN ses.context_info IS NULL THEN N'_'
            ELSE (
                    SELECT TOP 1 scs.STATUS
                    FROM SYSCLIENTSESSIONS AS scs
                    WHERE SUBSTRING(CAST(ses.context_info AS VARCHAR(128)),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2) + 1) - CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2)) = scs.SESSIONID
                    ORDER BY scs.RECID DESC
            )
    END
    , AX_Client = (
        SELECT TOP 1 scs.CLIENTCOMPUTER
        FROM SYSCLIENTSESSIONS AS scs
        WHERE SUBSTRING(CAST(ses.context_info AS VARCHAR(128)),
            CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2),
            CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),
            CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2) + 1) - CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2)) = scs.SESSIONID
        ORDER BY scs.RECID DESC
    )

    , AX_BATCH = CASE
        WHEN trh.text LIKE N'%)Update BATCH%' AND trh.text NOT LIKE N'%Hello there%' THEN N'# UPDATE BATCH'
        WHEN trh.text LIKE N'%Hello there%' THEN N'# Hello'
            ELSE (
                SELECT TOP (1)
                    abj.[CAPTION] AS [Batch Caption]
                FROM dbo.BATCH AS abh
                LEFT JOIN dbo.BATCHJOB AS abj
                    ON abj.RECID = abh.BATCHJOBID
                    AND SUBSTRING(CAST(ses.context_info AS VARCHAR(128)),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),
                        CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2) + 1) - CHARINDEX(' ',CAST(ses.context_info AS VARCHAR(128)),2)) = abh.SESSIONIDX
                WHERE 
                    abj.STATUS IN ( 2, 3, 5, 6, 7) --( 2, 3, 5, 6, 7)
                        AND abh.[STATUS] NOT IN (1, 3, 4, 5)   -- test option 20230929 (issue with corect BATCH name present when not in use)
                        AND ses.context_info IS NOT NULL  -- test option 20230623
            )
    END
    , CONVERT(VARCHAR, DATEADD(HOUR, 2, ses.login_time), 120) AS [session start] 
    , db_name(ses.database_id) AS db_name
    , ses.nt_user_name AS [SQL user]
    , trh.text
    , ser.query_hash
    , spu.internal_objects_alloc_page_count
    -- , ser.context_info
    , ser.granted_query_memory
    , CONCAT(DATEDIFF(SECOND, ses.last_request_end_time, GETDATE()), N' s') AS [prev req end]
    , CONCAT(DATEDIFF(SECOND, ses.last_request_start_time, GETDATE()), N' s') AS [last req start]
FROM sys.dm_exec_sessions AS ses
LEFT JOIN sys.dm_exec_requests AS ser        --LEFT to bring them all and in the darkness bind them
    ON ser.session_id = ses.session_id
        OUTER APPLY sys.dm_exec_sql_text(ser.sql_handle) AS trh
LEFT JOIN sys.dm_tran_active_snapshot_database_transactions AS ast
    ON ast.session_id = ses.session_id
LEFT JOIN sys.dm_tran_active_transactions AS tat
    ON tat.transaction_id = ast.transaction_id
LEFT JOIN sys.dm_db_session_space_usage AS spu
    ON spu.session_id = ses.session_id
WHERE 
    db_name(ses.database_id) != N'master' 
    AND ses.[nt_user_name] IS NOT NULL 
    -- AND ser.cpu_time IS NOT NULL

    -- AND ser.[status] IS NOT NULL             -- opened sessions without any process on them
    
    -- AND spu.internal_objects_alloc_page_count IS NOT NULL
    -- AND spu.internal_objects_alloc_page_count != 0

    -- AND ses.program_name LIKE N'azdata%'
    -- AND ses.program_name LIKE N'%SQLAgent%'
    -- AND ses.host_name NOT IN (N'P-AXBATCH01')
    -- AND ses.session_id IN (291)
    -- AND ast.transaction_id IS NOT NULL                  --
    -- AND ast.elapsed_time_seconds IS NOT NULL            --
    -- AND ser.query_hash IS NOT NULL
    -- AND 191 = SUBSTRING(CAST(ses.context_info AS VARCHAR(128)), CHARINDEX(' ', CAST(ses.context_info AS VARCHAR(128)), 2), CHARINDEX(' ', CAST(ses.context_info AS VARCHAR(128)), CHARINDEX(' ', CAST(ses.context_info AS VARCHAR(128)), 2) + 1) - CHARINDEX(' ', CAST(ses.context_info AS VARCHAR(128)), 2))
    -- AND ses.[status] != N'sleeping'                  -- line responsible for inactive sessions
    -- AND ser.[status] IS NOT NULL                     -- line responsible for "blank" request
    -- AND tat.dtc_state IS NOT NULL                    -- this responsible for DTC status filtering: https://learn.microsoft.com/en-us/sql/relational-databases/system-dynamic-management-views/sys-dm-tran-active-transactions-transact-sql?view=sql-server-ver16
    -- AND ses.nt_user_name = N'adminkryple'
ORDER BY ser.blocking_session_id DESC, tat.transaction_state, ast.elapsed_time_seconds DESC, ses.last_request_end_time DESC, ses.last_request_start_time DESC , ses.session_id DESC
-- ORDER BY AX_BATCH
